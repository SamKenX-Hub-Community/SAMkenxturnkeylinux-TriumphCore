# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

#           🦅 STACKHAWK        https://stackhawk.com

# The StackHawk HawkScan action makes it easy to integrate dynamic application security testing (DAST) into your
# CI pipeline. See the Getting Started guide (https://docs.stackhawk.com/hawkscan/) to get up and running with
# StackHawk quickly.

# To use this workflow, you must:
#
# 1.  Create an API Key and Application: Sign up for a free StackHawk account to obtain an API Key and
#     create your first app and configuration file at https://app.stackhawk.com.
#
# 2.  Save your API Key as a Secret: Save your API key as a GitHub Secret named HAWK_API_KEY.
#
# 3.  Add your Config File: Add your stackhawk.yml configuration file to the base of your repository directory.
#
# 4.  Set the Scan Failure Threshold: Add the hawk.failureThreshold configuration option
#     (https://docs.stackhawk.com/hawkscan/configuration/#hawk) to your stackhawk.yml configuration file. If your scan
#     produces alerts that meet or exceed the hawk.failureThreshold alert level, the scan will return exit code 42
#     and trigger a Code Scanning alert with a link to your scan results.
#
# 5.  Update the "Start your service" Step: Update the "Start your service" step in the StackHawk workflow below to
#     start your service so that it can be scanned with the "Run HawkScan" step.


name: "StackHawk"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '35 12 * * 0'

permissions:
  contents: read

jobs:
  stackhawk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for stackhawk/hawkscan-action to upload code scanning alert info
    name: StackHawk
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start your service
        run: ./your-service.sh &                  # ✏️ Update this to run your own service to be scanned

      - name: Run HawkScan
        uses: stackhawk/hawkscan-action@4c3258cd62248dac6d9fe91dd8d45928c697dee0
        continue-on-error: true                   # ✏️ Set to false to break your build on scan errors
        with:
          apiKey: ${{ secrets.HAWK_API_KEY }}
          codeScanningAlerts: true
          githubToken: ${{ github.token }}

      - name: Setup Java JDK

  uses: actions/setup-java@v1.4.4

  with:

    # The Java version to make available on the path. Takes a whole or semver Java version, or 1.x syntax (e.g. 1.8 => Java 8.x). Early access versions can be specified in the form of e.g. 14-ea, 14.0.0-ea, or 14.0.0-ea.28

    java-version: 

    # The package type (jre, jdk, jdk+fx)

    java-package: # optional, default is jdk

    # The architecture (x86, x64) of the package.

    architecture: # optional, default is x64

    # Path to where the compressed JDK is located. The path could be in your source repository or a local path on the agent.

    jdkFile: # optional

    # ID of the distributionManagement repository in the pom.xml file. Default is `github`

    server-id: # optional, default is github

    # Environment variable name for the username for authentication to the Apache Maven repository. Default is $GITHUB_ACTOR

    server-username: # optional, default is GITHUB_ACTOR

    # Environment variable name for password or token for authentication to the Apache Maven repository. Default is $GITHUB_TOKEN

    server-password: # optional, default is GITHUB_TOKEN

    # Path to where the settings.xml file will be written. Default is ~/.m2.

    settings-path: # optional

    # GPG private key to import. Default is empty string.

    gpg-private-key: # optional

    # Environment variable name for the GPG private key passphrase. Default is $GPG_PASSPHRASE.

    gpg-passphrase: # optional
